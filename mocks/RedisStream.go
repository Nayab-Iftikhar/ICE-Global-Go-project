// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "todo-app/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// RedisStream is an autogenerated mock type for the RedisStream type
type RedisStream struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *RedisStream) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, item
func (_m *RedisStream) Publish(ctx context.Context, item *entities.TodoItem) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.TodoItem) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx
func (_m *RedisStream) Subscribe(ctx context.Context) (<-chan *entities.TodoItem, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan *entities.TodoItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan *entities.TodoItem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *entities.TodoItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *entities.TodoItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRedisStream creates a new instance of RedisStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisStream {
	mock := &RedisStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
